{{define "master" -}}

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{.App.Name}}</title>
		<meta name="description" content="{{block "metaDescription" .}}{{.App.Description}}{{end}}">
		<link rel="stylesheet" href="/css/style.css">
	</head>
	<body>
		<a href="#main-content" class="skip-nav-link">Skip navigation</a>

		{{template "header" .}}

		<main id="main-content" class="main">
			{{if and .ErrorMessage (ne .View "error")}}
				<div class="error-banner center">
					<p>Error: {{.ErrorMessage}}</p>
				</div>
			{{end}}

			{{if .Session.Flash}}
				<div class="flash-banner center">
					<p>{{.Session.Flash}}</p>
				</div>
			{{end}}

			{{template "view" .}}
		</main>

		{{template "footer" .}}

		<script>
			function _componentsInit () {
				window._components ||= {
					actions: {
						mount: [],
						destroy: [],
					},
					observer: new MutationObserver(mutations => {
						for (const mutation of mutations) {
							for (const node of mutation.addedNodes) {
								if (!node.matches) {
									continue
								}

								for (const action of window._components.actions.mount) {
									if (!node.matches(action.selector)) {
										continue
									}

									action.callback(node)
								}
							}

							for (const node of mutation.removedNodes) {
								if (!node.matches) {
									continue
								}

								for (const action of window._components.actions.destroy) {
									if (!node.matches(action.selector)) {
										continue
									}

									action.callback(node)
								}
							}
						}
					}),
				}

				window._components.observer.observe(document.body, {
					childList: true,
					subtree: true,
				})
			}

			function onMount (selector, callback) {
				_componentsInit()

				const nodes = Array.from(document.querySelectorAll(selector))

				for (const node of nodes) {
					callback(node)
				}

				window._components.actions.mount.push({ selector, callback })
			}

			function onDestroy (selector, callback) {
				_componentsInit()

				window._components.actions.destroy.push({ selector, callback })
			}
		</script>
		<script src="/js/components.js" async defer></script>
	</body>
</html>

{{- end}}
