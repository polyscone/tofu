import { ErrorBanner } from "../../../components/error.js"
import { TOTPInput } from "../../../components/forms.js"

function SignInTOTP () {
	const state = {
		error: "",
		errors: {},
		totp: "",
	}

	function resendTOTPSMS (e) {
		e.preventDefault()

		platform.loading(async () => {
			const res = await platform.api.account.requestTOTPSMS(state.totp)

			state.error = res.body?.error || ""
			state.errors = res.body?.fields || {}
		})
	}

	function signIn (e) {
		e.preventDefault()

		platform.loading(async () => {
			const res = await platform.api.account.signInWithTOTP(state.totp)

			state.error = res.body?.error || ""
			state.errors = res.body?.fields || {}

			if (res.ok) {
				platform.api.account.tryRedirect(platform.routes.home.pattern)
			}
		})
	}

	return {
		view () {
			let instructions = "Please verify your identity by entering a 6 digit passcode that has been generated by your authenticator app."
			let smsButton = null

			if (platform.session.totpMethod === "sms") {
				instructions = "Please verify your identity by entering the 6 digit passcode that has been generated and sent to your registered phone number."
				smsButton = m("button.btn--alt", { onclick: resendTOTPSMS }, "Resend passcode SMS")
			}

			return [
				m("p", instructions),
				m("form", { onsubmit: signIn }, [
					state.error ? m(ErrorBanner, state.error) : null,
					m(TOTPInput, {
						label: "Passcode",
						name: "totp",
						required: true,
						autocomplete: "one-time-code",
						error: state.errors.totp,
						oninput (e) { state.totp = e.target.value },
					}),
					m("button[type=submit]", "Sign in"),
					smsButton,
					m(m.route.Link, { href: platform.routes.accountSignInRecoveryCode.pattern }, "Use a recovery code"),
					m(m.route.Link, { href: platform.routes.accountSignIn.pattern }, "Switch account"),
				]),
			]
		},
	}
}

platform.routes.accountSignInTOTP = {
	pattern: "/account/sign-in/totp",
	component: SignInTOTP,
	onmatch () {
		if (platform.session.isSignedIn || !platform.session.isAwaitingTOTP) {
			return m.route.set(platform.routes.accountSignIn.pattern)
		}
	},
}
